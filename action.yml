apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'Crane copy images'
description: 'Copy a remote image from src to dst while retaining the digest value'

inputs:
  src:
    description: 'Source image'
    required: true
  destination:
    description: 'Target image'
    required: true
  platform:
    description: 'Specifies the platform in the form os/arch[/variant][:osversion] (e.g. linux/amd64)'
    default: "all"
  skip-image-validation:
    description: 'Skip source and destination image validation'
    default: "true"
  registry-configuration:
    description: >
      CloudBees registry configuration file containing the registries to use for loading images.
      By default it uses the file containing the registries configured under 'Integrations' in the CloudBees platform.
    default: ${{ cloudbees.registries }}

outputs:
  digest:
    value: ${{ steps.cranecopy.outputs.digest }}
    description: Image digest of the destination image
  image:
    value: ${{ steps.cranecopy.outputs.image }}
    description: |
      Image reference of the destination image, including the image digest.
  artifact-id:
    value: ${{ steps.publishbuildartifact.outputs.artifact-id }}
    description: "The unique identifier of the artifact."

runs:
  using: composite
  steps:
    - id: resolveimages
      if: ${{ inputs.registry-configuration != '' }}
      name: Resolve source image
      uses: docker://public.ecr.aws/l7o7z1g8/services/registry-config:0.0.22
      with:
        entrypoint: /registry-config
        args: --config="${{ inputs.registry-configuration }}" resolve "${{ inputs.src }}" resolved-image.file

    - id: cranecopy
      name: Copy a remote image from a given source to a destination
      uses: docker://gcr.io/go-containerregistry/crane:debug
      run: |
        set -uo pipefail
        
        dest_image=${{ inputs.destination }}
        if [[ "${dest_image}" == *@sha256:* ]]; then
          echo "The destination image reference is invalid: contains a digest"
          exit 1
        fi

        if [ ! -e resolved-image.file ]; then
          echo '${{ inputs.src }}' > resolved-image.file
        fi

        set +e
        
        image_with_digest=
        while IFS= read -r line; do
          if [ "$SKIP_IMAGE_VALIDATION" == false ]; then
            echo "Validating source image ${line}"
            crane validate --remote ${line} --platform ${{ inputs.platform }}

            if [ $? -ne 0 ]; then
              echo "Failed to validate image: $line"
              continue
            fi
          fi

          echo "Getting image digest of source image ${line}"
          image_with_digest=$(crane digest ${line} --full-ref --platform ${{ inputs.platform }})
        
          if [ $? -ne 0 ]; then
            echo "Failed get image digest: $line"
            image_with_digest=
            continue
          fi

          echo "Found source image to copy: ${image_with_digest}"

          echo "Copying source image ${image_with_digest} to destination ${{ inputs.destination }}"
          crane copy ${image_with_digest} ${{ inputs.destination }} --platform ${{ inputs.platform }}

          if [ $? -ne 0 ]; then
            echo "Failed to copy image: $line"
            image_with_digest=
            continue
          fi
          break
        done < "resolved-image.file"
        
        set -e

        rm resolved-image.file

        if [ -z "${image_with_digest}" ]; then
          exit 1
        fi

        source_digest="${image_with_digest##*@}"
     
        if [[ "${dest_image}" == *:* ]]; then
            dest_with_digest="${dest_image%%:*}@$source_digest"
        else
            dest_with_digest="$dest_image@$source_digest"
        fi

        if [ "$SKIP_IMAGE_VALIDATION" == false ]; then
          echo "Validating destination image ${{ inputs.destination }}"
          crane validate --remote ${dest_with_digest} --platform ${{ inputs.platform }}
        fi

        echo "Destination image: ${dest_with_digest}"
        echo "Destination digest: ${source_digest}"

        printf %s "${source_digest}" > $CLOUDBEES_OUTPUTS/digest
        printf %s "${dest_with_digest}" > $CLOUDBEES_OUTPUTS/image

      env:
        SKIP_IMAGE_VALIDATION: ${{ inputs.skip-image-validation == 'true' && 'true' || 'false' }}
        PLATFORM: ${{ inputs.platform }}
        
    - id: publishbuildartifact
      name: Publish build artifact
      uses: docker://alpine/curl:latest
      run: |
        IMAGE_NAME=$(echo "$DESTINATION" | awk -F/ '{sub($1"/","");print}')
        IMAGE_TAG=$(echo "$DESTINATION" | awk -F ':' '{print $NF}')
        IMAGE_DIGEST=${{ steps.cranecopy.outputs.digest }}
        # Publish build artifact
        response=$(curl --fail-with-body  -X 'POST' "$URL/v3/artifactinfos" -H "Authorization: Bearer $API_TOKEN" -H 'Content-Type: application/json' --data-binary '{"runId":"'"$RUN_ID"'","runAttempt":'$RUN_ATTEMPT',"name":"'"$IMAGE_NAME"'","version":"'"$IMAGE_TAG"'","url":"'"$DESTINATION"'","type":"docker","digest":"'$IMAGE_DIGEST'"}') || command_failed=1
        # Check curl exit code
        if [ ${command_failed:-0} -eq 1 ];
        then
          echo "WARN: Publish build artifact failed with error '$response'"
        else
          echo "Build artifact published successfully"
          
          # Extract the artifactId
          id=$(echo "$response" | grep -o '"id": *"[^"]*"' | sed 's/.*"id": *"\([^"]*\)".*/\1/')
        
          # Set it as an output
          printf %s "$id" > $CLOUDBEES_OUTPUTS/artifact-id
        fi
      env:
        DESTINATION: ${{ inputs.destination }}
        URL: ${{ cloudbees.api.url }}
        API_TOKEN: ${{ cloudbees.api.token }}
        RUN_ID: ${{ cloudbees.run_id }}
        RUN_ATTEMPT: ${{ cloudbees.run_attempt }}
